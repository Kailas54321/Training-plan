k8

#  kubectl delete deployment --all   --to delete all deployment
#  kubectl port-farword svc/<service name> <running port no>   --to expose a service ip service in minikube
# minikube ip    ---to get ip of minikube
# k apply -f <file name>
# 1. configmap  2.secrets  3.service  4.mongo-deployment   5.web-app.yml
# k describe pod -o wide
# k logs <resource_name>
# k exec -it <pod_name> -- /bin/bash    ---to enter inside the pod in single container
# k exec -it <pod_name> -c <cont._id> 

# k get pod
# k apply 
# kubectl delete deployment --all
# kubectl delete secret --all
# k delete configmap --all
# k delete pv --all

# k get all
# k 

# kubectl get svc -n lumina --lists all svs in lumina ns
# kubectl -n lumina port-forward service/webapp-service 30101:8081   ---expose the web app nodeport service on the port 30101 to access externally
# on url :     localhost:30101

# minikube service webapp-service -n lumina   ---

# kubectl get all -n lumina   ---lists all the services
# 
# kubectl -n lumina port-forward service/prometheus-kube-prometheus-prometheus 30102:9090    ---port forword the prometheus 
# 

# helm repo add grafana https://grafana.github.io/helm-charts      
# helm repo update

# helm install grafana grafana/grafana   ---to install grafana on cluster
# kubectl -n lumina port-forward service/grafana 30103:80
# kubectl get secret --namespace lumina grafana -o yaml  --to get secrets from grafana svc
# 

# k run custom-nginx --name=nginx --port=8080
# k create deployment redis-depoy --image=redis --replicas

# k get cm -n <ns>  to see all configmaps

#* HPA * 
# kubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10    --to create hpa
# kubectl get hpa

# # Run this in a separate terminal
# # so that the load generation continues and you can carry on with the rest of the steps
# kubectl run -i --tty load-generator --rm --image=busybox:1.28 --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://php-apache; done"
# # type Ctrl+C to end the watch when you're ready
# kubectl get hpa php-apache --watch


# k get pod -o wide
# kubectl scale --replicas=2 -f new-replica-set    --to scale out and down the replicas
# kubectl run nginx --image=nginx
* Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
# kubectl run nginx --image=nginx --dry-run=client -o yaml
# kubectl get po nginx -o yaml       ---to get yaml of running pod

Create a deployment
#kubectl create deployment --image=nginx nginx

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
#kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run) and save it to a file.
#kubectl create deployment --image=nginx nginx --dry-run=client -o yaml > nginx-deployment.yaml

In k8s version 1.19+, we can specify the --replicas option to create a deployment with 4 replicas.
#kubectl create deployment --image=nginx nginx --replicas=4 --dry-run=client -o yaml > nginx-deployment.yaml

# kubectl create deployment nginx --image=nginx --replicas=4
# kubectl create deployment nginx --image=nginx --dry-run=client -o yaml > nginx-deployment.yaml

# kubectl run redis --image=redis:alpine --labels="tier=db"   ---run redis with mentioned image and labels "tier=db"

# kubectl create deployment webapp --image=kodekloud/webapp-color --replicas=3
# kubectl run custom-nginx --image=nginx --port=8080

# kubectl run httpd --image=httpd --port=80 --expose=true      ---creates the pod and exposed with cluster ip

# kubectl get daemonset --all-namespaces
# kubectl describe daemonset kube-flannel-ds --namespace=kube-flannel


